package templates

import (
	"fmt"
	"github.com/zaibon/shortcut/domain"
	"github.com/zaibon/shortcut/middleware"
	"github.com/zaibon/shortcut/templates/components"
)

const timeFormat = "Mon, 02 Jan 06 at 15:04:05"

templ URLSPage(urls []domain.URLStat, paginationParams middleware.PaginationParams) {
	@Layout() {
		<main class="flex-grow">
			<div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				<!-- URL List Header -->
				<div class="px-4 py-5 sm:px-6 bg-white shadow sm:rounded-lg mb-6">
					<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
						<div>
							<h1 class="text-2xl font-bold text-gray-900">Your Shortened URLs</h1>
							<p class="mt-1 text-sm text-gray-600">
								Manage and track all your shortened links in one place.
							</p>
						</div>
						<div class="mt-4 sm:mt-0">
							<a
								href="/"
								class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
							>
								<i class="fas fa-plus mr-2"></i> Create New URL
							</a>
						</div>
					</div>
				</div>
				<!-- Search and Filter -->
				@URLFilter(paginationParams)
				<!-- URL List -->
				@URLTable(urls, paginationParams)
			</div>
		</main>
	}
}

templ URLFilter(p middleware.PaginationParams) {
	<div class="bg-white shadow sm:rounded-lg mb-6">
		<div class="px-4 py-5 sm:p-6">
			<div class="flex flex-col sm:flex-row gap-4">
				<div class="flex-grow">
					<label for="search" class="sr-only">Search URLs</label>
					<div class="relative rounded-md shadow-sm">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<i class="fas fa-search text-gray-400"></i>
						</div>
						<input
							type="text"
							name="search"
							id="search"
							class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
							placeholder="Search URLs"
							hx-get="/urls-search"
							hx-trigger="keyup changed delay:500ms"
							hx-target="#url-table"
							hx-indicator="#search-spinner"
						/>
						<div
							id="search-spinner"
							class="htmx-indicator absolute inset-y-0 right-0 pr-3 flex items-center"
						>
							<svg
								class="animate-spin h-5 w-5 text-indigo-500"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
							>
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								></circle>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								></path>
							</svg>
						</div>
					</div>
				</div>
				<div>
					<label for="sort" class="sr-only">Sort URLs</label>
					<select
						id="sort"
						name="sort"
						class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
						hx-get="/urls-sort"
						hx-trigger="change"
						hx-target="#url-table"
						hx-indicator="#sort-spinner"
					>
						<option value="newest">Newest</option>
						<option value="oldest">Oldest</option>
						<option value="most-clicked">Most Clicked</option>
						<option value="least-clicked">Least Clicked</option>
					</select>
					<div id="sort-spinner" class="htmx-indicator hidden">
						<svg
							class="animate-spin h-5 w-5 text-indigo-500"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
						>
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"
							></circle>
							<path
								class="opacity-75"
								fill="currentColor"
								d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
							></path>
						</svg>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ URLTable(urls []domain.URLStat, p middleware.PaginationParams) {
	<div id="url-table" class="bg-white shadow overflow-hidden sm:rounded-lg">
		<div class="overflow-x-auto">
			<table class="min-w-full divide-y divide-gray-200">
				<thead class="bg-gray-50">
					<tr>
						<th
							scope="col"
							class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
						>
							Original URL
						</th>
						<th
							scope="col"
							class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
						>
							Short URL
						</th>
						<th
							scope="col"
							class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
						>
							Clicks
						</th>
						<th
							scope="col"
							class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
						>
							Created
						</th>
						<th
							scope="col"
							class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
						>
							Actions
						</th>
					</tr>
				</thead>
				<tbody class="bg-white divide-y divide-gray-200">
					<!-- URL items will be loaded here -->
					for _, url := range urls {
						<tr>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate">
								<a
									href={ templ.SafeURL(url.Long) }
									class="hover:text-indigo-600"
									target="_blank"
									title="{ url.Long }"
								>
									{ url.Long }
								</a>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
								<div class="flex items-center">
									<a
										href={ templ.SafeURL(url.Short) }
										class="text-indigo-600 hover:text-indigo-900"
										target="_blank"
									>
										{ url.Short }
									</a>
									<button
										class="ml-2 text-gray-400 hover:text-gray-600"
										onclick={ templ.JSFuncCall("copyToClipboard", url.Short) }
									>
										<i class="fas fa-copy"></i>
									</button>
								</div>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
								<span
									class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"
								>
									{ fmt.Sprintf("%d", url.NrVisited) }
								</span>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
								{ url.CreatedAt.Format(timeFormat) }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
								<div class="flex space-x-2" x-data="qrCodeModal">
									// <button class="text-indigo-600 hover:text-indigo-900" title="Edit">
									// 	<i class="fas fa-edit"></i>
									// </button>
									<button
										class="text-indigo-600 hover:text-indigo-900"
										title="QR Code"
										@click={ fmt.Sprintf("showModal('%s')", url.Short) }
									>
										<i class="fas fa-qrcode"></i>
									</button>
									@components.QRCodePopup(url)
									<a href={ templ.SafeURL(fmt.Sprintf("/urls/%s", url.Slug)) } class="text-indigo-600 hover:text-indigo-900" title="Analytics">
										<i class="fas fa-chart-bar"></i>
									</a>
									<button
										class="text-red-600 hover:text-red-900"
										title="Delete"
										hx-delete={ fmt.Sprintf("/urls/%d", url.ID) }
										hx-confirm="Are you sure you want to delete this URL?"
										hx-target="closest tr"
										hx-swap="outerHTML swap:1s"
									>
										<i class="fas fa-trash"></i>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<!-- Pagination -->
		<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
			<div class="flex-1 flex justify-between sm:hidden">
				<a
					href="#"
					class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
				>
					Previous
				</a>
				<a
					href="#"
					class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
				>
					Next
				</a>
			</div>
			<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
				@pagination(p)
			</div>
		</div>
	</div>
}

templ pagination(p middleware.PaginationParams) {
	{{ first := fmt.Sprintf("%d", (p.Page-1)*p.PageSize+1) }}
	{{ last := fmt.Sprintf("%d", min(p.Page*p.PageSize+p.PageSize, p.TotalRecords)) }}
	{{ total := fmt.Sprintf("%d", p.TotalRecords) }}
	{{ previous := fmt.Sprintf("urls?page=%d&page_size=%d", max(1, p.Page-1), p.PageSize) }}
	{{ next := fmt.Sprintf("urls?page=%d&page_size=%d", min(p.Page+1, (p.TotalRecords+p.PageSize-1)/p.PageSize), p.PageSize) }}
	<div>
		<p class="text-sm text-gray-700">
			Showing <span class="font-medium">{ first }</span> to <span class="font-medium">{ last }</span> of <span
	class="font-medium"
>{ total }</span> results
		</p>
	</div>
	<div>
		<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
			<a
				href={ templ.SafeURL(previous) }
				class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
			>
				<span class="sr-only">Previous</span>
				<i class="fas fa-chevron-left h-5 w-5"></i>
			</a>
			{{ startPage := max(1, p.Page-2) }}
			{{ endPage := min((p.TotalRecords+p.PageSize-1)/p.PageSize, startPage+3) }}
			for i := startPage; i <= endPage; i++ {
				<a
					href={ templ.SafeURL(fmt.Sprintf("urls?page=%d&page_size=%d", i, p.PageSize)) }
					if i==p.Page {
						aria-current="page"
					}
					class={ templ.KV("z-10 bg-indigo-50 border-indigo-500 text-indigo-600 relative inline-flex items-center px-4 py-2 border text-sm font-medium",i==p.Page),
					templ.KV("bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium", i!=p.Page) }
				>
					{ fmt.Sprintf("%d", i) }
				</a>
			}
			<a
				href={ templ.SafeURL(next) }
				class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
			>
				<span class="sr-only">Next</span>
				<i class="fas fa-chevron-right h-5 w-5"></i>
			</a>
		</nav>
	</div>
}
