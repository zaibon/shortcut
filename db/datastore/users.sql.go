// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package datastore

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, created_at, password_salt
FROM users
WHERE users.email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordSalt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username, email, password,password_salt)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password, created_at, password_salt
`

type InsertUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	Password     []byte `json:"password"`
	PasswordSalt []byte `json:"password_salt"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.PasswordSalt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordSalt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $1, password_salt = $2
WHERE id = $3
`

type UpdatePasswordParams struct {
	Password     []byte `json:"password"`
	PasswordSalt []byte `json:"password_salt"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.PasswordSalt, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, email = $2
WHERE id = $3
RETURNING id, username, email, password, created_at, password_salt
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordSalt,
	)
	return i, err
}
