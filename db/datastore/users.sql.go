// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOauth2State = `-- name: GetOauth2State :one
SELECT state, created_at, expire_at, provider
FROM oauth2_state
WHERE state = $1
AND expire_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetOauth2State(ctx context.Context, state string) (Oauth2State, error) {
	row := q.db.QueryRow(ctx, getOauth2State, state)
	var i Oauth2State
	err := row.Scan(
		&i.State,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.Provider,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, created_at, password_salt, is_oauth, guid
FROM users
WHERE users.email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordSalt,
		&i.IsOauth,
		&i.Guid,
	)
	return i, err
}

const insertOauth2State = `-- name: InsertOauth2State :exec
INSERT INTO oauth2_state (state, provider)
VALUES ($1, $2)
`

type InsertOauth2StateParams struct {
	State    string `json:"state"`
	Provider string `json:"provider"`
}

func (q *Queries) InsertOauth2State(ctx context.Context, arg InsertOauth2StateParams) error {
	_, err := q.db.Exec(ctx, insertOauth2State, arg.State, arg.Provider)
	return err
}

const insertUserOauth = `-- name: InsertUserOauth :one
INSERT INTO users (guid, username, email, is_oauth)
VALUES ($1, $2, $3, true)
RETURNING id, username, email, password, created_at, password_salt, is_oauth, guid
`

type InsertUserOauthParams struct {
	Guid     pgtype.UUID `json:"guid"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
}

func (q *Queries) InsertUserOauth(ctx context.Context, arg InsertUserOauthParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUserOauth, arg.Guid, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordSalt,
		&i.IsOauth,
		&i.Guid,
	)
	return i, err
}
