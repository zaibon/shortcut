// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOauth2State = `-- name: GetOauth2State :one
SELECT state, created_at, expire_at, provider
FROM oauth2_state
WHERE state = $1
AND expire_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetOauth2State(ctx context.Context, state string) (Oauth2State, error) {
	row := q.db.QueryRow(ctx, getOauth2State, state)
	var i Oauth2State
	err := row.Scan(
		&i.State,
		&i.CreatedAt,
		&i.ExpireAt,
		&i.Provider,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, created_at, is_oauth, guid, updated_at
FROM users
WHERE users.email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsOauth,
		&i.Guid,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGUID = `-- name: GetUserByGUID :one
SELECT id, username, email, created_at, is_oauth, guid, updated_at
FROM users
WHERE users.guid = $1
LIMIT 1
`

func (q *Queries) GetUserByGUID(ctx context.Context, guid pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGUID, guid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsOauth,
		&i.Guid,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProvider = `-- name: GetUserProvider :one
SELECT id, user_id, provider, provider_user_id, created_at, updated_at
FROM user_providers
WHERE user_id = $1
AND provider = $2
LIMIT 1
`

type GetUserProviderParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Provider string      `json:"provider"`
}

func (q *Queries) GetUserProvider(ctx context.Context, arg GetUserProviderParams) (UserProvider, error) {
	row := q.db.QueryRow(ctx, getUserProvider, arg.UserID, arg.Provider)
	var i UserProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProviderByProviderUserId = `-- name: GetUserProviderByProviderUserId :one
SELECT id, user_id, provider, provider_user_id, created_at, updated_at
FROM user_providers
WHERE provider = $1
AND provider_user_id = $2
LIMIT 1
`

type GetUserProviderByProviderUserIdParams struct {
	Provider       string `json:"provider"`
	ProviderUserID string `json:"provider_user_id"`
}

func (q *Queries) GetUserProviderByProviderUserId(ctx context.Context, arg GetUserProviderByProviderUserIdParams) (UserProvider, error) {
	row := q.db.QueryRow(ctx, getUserProviderByProviderUserId, arg.Provider, arg.ProviderUserID)
	var i UserProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertOauth2State = `-- name: InsertOauth2State :exec
INSERT INTO oauth2_state (state, provider)
VALUES ($1, $2)
`

type InsertOauth2StateParams struct {
	State    string `json:"state"`
	Provider string `json:"provider"`
}

func (q *Queries) InsertOauth2State(ctx context.Context, arg InsertOauth2StateParams) error {
	_, err := q.db.Exec(ctx, insertOauth2State, arg.State, arg.Provider)
	return err
}

const insertUserOauth = `-- name: InsertUserOauth :one
INSERT INTO users (guid, username, email, is_oauth)
VALUES ($1, $2, $3, true)
ON CONFLICT (email) DO UPDATE SET username = $2
RETURNING id, username, email, created_at, is_oauth, guid, updated_at
`

type InsertUserOauthParams struct {
	Guid     pgtype.UUID `json:"guid"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
}

func (q *Queries) InsertUserOauth(ctx context.Context, arg InsertUserOauthParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUserOauth, arg.Guid, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsOauth,
		&i.Guid,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserProvider = `-- name: InsertUserProvider :one
INSERT INTO user_providers (user_id, provider, provider_user_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, provider, provider_user_id, created_at, updated_at
`

type InsertUserProviderParams struct {
	UserID         pgtype.UUID `json:"user_id"`
	Provider       string      `json:"provider"`
	ProviderUserID string      `json:"provider_user_id"`
}

func (q *Queries) InsertUserProvider(ctx context.Context, arg InsertUserProviderParams) (UserProvider, error) {
	row := q.db.QueryRow(ctx, insertUserProvider, arg.UserID, arg.Provider, arg.ProviderUserID)
	var i UserProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserProviders = `-- name: ListUserProviders :many
SELECT id, user_id, provider, provider_user_id, created_at, updated_at
FROM user_providers
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserProviders(ctx context.Context, userID pgtype.UUID) ([]UserProvider, error) {
	rows, err := q.db.Query(ctx, listUserProviders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProvider{}
	for rows.Next() {
		var i UserProvider
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
