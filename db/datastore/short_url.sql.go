// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: short_url.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addShortURL = `-- name: AddShortURL :one
INSERT INTO urls (short_url, long_url, author_id) 
VALUES ($1, $2, $3)
RETURNING id, short_url, long_url, author_id, created_at
`

type AddShortURLParams struct {
	ShortUrl string      `json:"short_url"`
	LongUrl  string      `json:"long_url"`
	AuthorID pgtype.Int4 `json:"author_id"`
}

func (q *Queries) AddShortURL(ctx context.Context, arg AddShortURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, addShortURL, arg.ShortUrl, arg.LongUrl, arg.AuthorID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.AuthorID,
		&i.CreatedAt,
	)
	return i, err
}

const getShortURL = `-- name: GetShortURL :one
SELECT id, short_url, long_url, author_id, created_at
FROM urls
WHERE urls.short_url = $1
`

func (q *Queries) GetShortURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRow(ctx, getShortURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.AuthorID,
		&i.CreatedAt,
	)
	return i, err
}

const listShortURLs = `-- name: ListShortURLs :many
SELECT id, short_url, long_url, author_id, created_at
FROM urls
WHERE urls.author_id = $1
ORDER BY id DESC
`

func (q *Queries) ListShortURLs(ctx context.Context, authorID pgtype.Int4) ([]Url, error) {
	rows, err := q.db.Query(ctx, listShortURLs, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUrl,
			&i.LongUrl,
			&i.AuthorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
