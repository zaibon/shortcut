// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: short_url.sql

package datastore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addShortURL = `-- name: AddShortURL :one
INSERT INTO urls (title,short_url, long_url, author_id) 
VALUES ($1, $2, $3, $4)
RETURNING id, short_url, long_url, author_id, created_at, title, is_archived
`

type AddShortURLParams struct {
	Title    string `json:"title"`
	ShortUrl string `json:"short_url"`
	LongUrl  string `json:"long_url"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) AddShortURL(ctx context.Context, arg AddShortURLParams) (Url, error) {
	row := q.db.QueryRow(ctx, addShortURL,
		arg.Title,
		arg.ShortUrl,
		arg.LongUrl,
		arg.AuthorID,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.AuthorID,
		&i.CreatedAt,
		&i.Title,
		&i.IsArchived,
	)
	return i, err
}

const archiveURL = `-- name: ArchiveURL :exec
UPDATE urls
SET is_archived = true
WHERE urls.short_url = $1
AND urls.author_id = $2
`

type ArchiveURLParams struct {
	ShortUrl string `json:"short_url"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) ArchiveURL(ctx context.Context, arg ArchiveURLParams) error {
	_, err := q.db.Exec(ctx, archiveURL, arg.ShortUrl, arg.AuthorID)
	return err
}

const getShortURL = `-- name: GetShortURL :one
SELECT id, short_url, long_url, author_id, created_at, title, is_archived
FROM urls
WHERE urls.short_url = $1
`

func (q *Queries) GetShortURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRow(ctx, getShortURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.AuthorID,
		&i.CreatedAt,
		&i.Title,
		&i.IsArchived,
	)
	return i, err
}

const listShortURLs = `-- name: ListShortURLs :many
SELECT id, short_url, long_url, author_id, created_at, title, is_archived
FROM urls
WHERE urls.author_id = $1
AND urls.is_archived = $2
ORDER BY id DESC
`

type ListShortURLsParams struct {
	AuthorID   int32       `json:"author_id"`
	IsArchived pgtype.Bool `json:"is_archived"`
}

func (q *Queries) ListShortURLs(ctx context.Context, arg ListShortURLsParams) ([]Url, error) {
	rows, err := q.db.Query(ctx, listShortURLs, arg.AuthorID, arg.IsArchived)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Url{}
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.ShortUrl,
			&i.LongUrl,
			&i.AuthorID,
			&i.CreatedAt,
			&i.Title,
			&i.IsArchived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unarchiveURL = `-- name: UnarchiveURL :exec
UPDATE urls
SET is_archived = false
WHERE urls.short_url = $1
AND urls.author_id = $2
`

type UnarchiveURLParams struct {
	ShortUrl string `json:"short_url"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) UnarchiveURL(ctx context.Context, arg UnarchiveURLParams) error {
	_, err := q.db.Exec(ctx, unarchiveURL, arg.ShortUrl, arg.AuthorID)
	return err
}

const updateTitle = `-- name: UpdateTitle :one
UPDATE urls
SET title = $1
WHERE urls.short_url = $2
AND urls.author_id = $3
RETURNING id, short_url, long_url, author_id, created_at, title, is_archived
`

type UpdateTitleParams struct {
	Title    string `json:"title"`
	ShortUrl string `json:"short_url"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) UpdateTitle(ctx context.Context, arg UpdateTitleParams) (Url, error) {
	row := q.db.QueryRow(ctx, updateTitle, arg.Title, arg.ShortUrl, arg.AuthorID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.ShortUrl,
		&i.LongUrl,
		&i.AuthorID,
		&i.CreatedAt,
		&i.Title,
		&i.IsArchived,
	)
	return i, err
}
